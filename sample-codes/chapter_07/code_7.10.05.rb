a = 'abc'
b = 'abc'
a.equal?(b) #=> false

c = a
a.equal?(c) #=> true

# ----------------------------------------

1 == 1.0 #=> true

# ----------------------------------------

# ハッシュ上では1と1.0は別々のキーとして扱われる
h = { 1 => 'Integer', 1.0 => 'Float' }
h[1]   #=> "Integer"
h[1.0] #=> "Float"

# 異なるキーとして扱われるのは、eql?メソッドで比較したときにfalseになるため
1.eql?(1.0) #=> false

# ----------------------------------------

a = 'japan'
b = 'japan'
# eql?が真なら、hash値も同じ
a.eql?(b) #=> true
a.hash    #=> 1168978237820510471
b.hash    #=> 1168978237820510471

c = 1
d = 1.0
# eql?が偽なら、hash値も異なる
c.eql?(d) #=> false
c.hash    #=> -2946966815421412510
d.hash    #=> 3646131212290672247

# ----------------------------------------

text = '03-1234-5678'

case text
when /^\d{3}-\d{4}$/
  puts '郵便番号です'
when /^\d{4}\/\d{1,2}\/\d{1,2}$/
  puts '日付です'
when /^\d+-\d+-\d+$/
  puts '電話番号です'
end
#=> 電話番号です

# ----------------------------------------

# NOTE: 2018-01-15に訂正 http://gihyo.jp/book/2017/978-4-7741-9397-7/support
/^\d{3}-\d{4}$/ === text

# ----------------------------------------

# NOTE: 2018-01-15に訂正 http://gihyo.jp/book/2017/978-4-7741-9397-7/support
/^\d{4}\/\d{1,2}\/\d{1,2}$/ === text

# ----------------------------------------

value = [1, 2, 3]

# 内部的には String === value、Array === value、Hash === valueの結果が評価されている
case value
when String
  puts '文字列です'
when Array
  puts '配列です'
when Hash
  puts 'ハッシュです'
end
#=> 配列です
